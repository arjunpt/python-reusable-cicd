name: Python application


on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to set up'
        required: true
        type: string
      requirements-path:
        description: 'Path to the requirements.txt file'
        required: true
        type: string
      test-path:
        description: 'Path to the test file or directory'
        required: true
        type: string
      dockerfile-path:
        description: 'Path to the Dockerfile'
        required: true
        type: string
      docker-image-name:
        description: 'Name of the Docker image to build'
        required: true
        type: string
      ecr-repo-name:
        description: 'AWS ECR repository name'
        required: true
        type: string


    secrets:
      SNYK_TOKEN:
        description: 'Snyk token for vulnerability scanning'
        required: true
      AWS_ACCESS_KEY:
        description: 'AWS access key ID'
        required: true
      AWS_SECRET_KEY:
        description: 'AWS secret access key'
        required: true
      AWS_REGION:
        description: 'AWS region for ECR'
        required: true
      EC2_HOST:
        description: 'EC2 host for SSH deployment'
        required: true
      EC2_SSH_KEY:
        description: 'SSH private key for EC2'
        required: true
      EC2_USERNAME:
        description: 'EC2 username'
        required: true
      ECR_REGISTRY: 
        description: 'ECR REGISTRY'
        required: true
      ECR_REPOSITORY: 
        description: 'ECR_REPOSITORY'
        required: true

jobs:
  # Build Stages
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ inputs.requirements-path }}

  # Lint Stages
  lint_test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ inputs.requirements-path }}
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Test Stage
  py_test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ inputs.requirements-path }}

    - name: Test with pytest
      run: |
        export PYTHONPATH=src
        pytest ${{ inputs.test-path }}


  # Security Scan Stage
  Snyk_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test

  # Docker Build Stage
  docker_build:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test, Snyk_scan]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ inputs.dockerfile-path }}
        tags: ${{ inputs.docker-image-name }}:latest
        load: true

    - name: Save Docker image as .tar file
      run: |
        docker save -o /tmp/docker-images.tar ${{ inputs.docker-image-name }}:latest
  
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/docker-images.tar

    - name: List Docker images
      run: |
        docker images

  # Docker Security Scan Stage
# Docker Security Scan Stage
  snyk_image_scan:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Tag Docker image
      run: |
       docker tag ${{ inputs.docker-image-name }}:latest ${{ inputs.docker-image-name }}:latest
    - name: Scan Docker image with Snyk
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ inputs.docker-image-name }}:latest
        args: --file=${{ inputs.dockerfile-path }} --severity-threshold=high --sarif-file-output=snyk.sarif

  
    

  # Deployment Stage
  # Deployment Stage
  publish:
    runs-on: ubuntu-latest
    needs: snyk_image_scan
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Tag and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repo-name }}
      run: |
        docker tag ${{ inputs.docker-image-name }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Post-Deployment Tasks Stage
  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
    - name: Set up SSH key  
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
        

    - name: Install Docker on Ubuntu EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
          sudo apt update -y
          sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-cache policy docker-ce
          sudo apt install docker-ce -y
          sudo chmod 666 /var/run/docker.sock
          sudo usermod -aG docker ubuntu
          sudo systemctl restart docker
        EOF

    

    - name: Pull and run Docker image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
          # sudo apt install curl unzip -y
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          # sudo ./aws/install
          # export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          # export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          # export AWS_REGION=$AWS_REGION
          echo "AWS CLI version:"
          aws --version
          sudo -i
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
          export AWS_REGION=us-east-1
          export AWS_DEFAULT_OUTPUT=json
          echo "AWS CLI version:"
          aws --version
          echo "Testing AWS credentials by listing S3 buckets:"
          aws s3 ls
          echo "AWS configuration:"
          aws configure list
          aws sts get-caller-identity
          echo "Logging in to ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY || { echo "ECR login failed."; exit 1; }
          docker info | grep "Registry" || { echo "ECR login verification failed."; exit 1; }
          
      